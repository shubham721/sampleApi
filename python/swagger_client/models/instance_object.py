# coding: utf-8

"""
    Simple API

    This is a simple API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InstanceObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, src=None, bkt=None, path=None):
        """
        InstanceObject - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'src': 'str',
            'bkt': 'str',
            'path': 'str'
        }

        self.attribute_map = {
            'src': 'src',
            'bkt': 'bkt',
            'path': 'path'
        }

        self._src = src
        self._bkt = bkt
        self._path = path


    @property
    def src(self):
        """
        Gets the src of this InstanceObject.


        :return: The src of this InstanceObject.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """
        Sets the src of this InstanceObject.


        :param src: The src of this InstanceObject.
        :type: str
        """
        if src is None:
            raise ValueError("Invalid value for `src`, must not be `None`")

        self._src = src

    @property
    def bkt(self):
        """
        Gets the bkt of this InstanceObject.


        :return: The bkt of this InstanceObject.
        :rtype: str
        """
        return self._bkt

    @bkt.setter
    def bkt(self, bkt):
        """
        Sets the bkt of this InstanceObject.


        :param bkt: The bkt of this InstanceObject.
        :type: str
        """
        if bkt is None:
            raise ValueError("Invalid value for `bkt`, must not be `None`")

        self._bkt = bkt

    @property
    def path(self):
        """
        Gets the path of this InstanceObject.


        :return: The path of this InstanceObject.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this InstanceObject.


        :param path: The path of this InstanceObject.
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
